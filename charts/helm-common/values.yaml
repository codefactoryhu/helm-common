global:
  # -- The name of the service account who runs the pod(s)
  serviceAccountName: default
  # -- The address of HashiCorp Vault server
  vaultAddress: "https://vault-dev.domain.tld"

# -- The number of desired replicas of the deployment
replicaCount: 1
deployment:
  strategy:
    # -- [strategy](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy)
    type: RollingUpdate
    rollingUpdate:
      # -- [max-unavailable](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#max-unavailable)
      maxUnavailable: 25%
      # -- [max-surge](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#max-surge)
      maxSurge: 25%
  # -- [progress-deadline-seconds](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#progress-deadline-seconds)
  progressDeadlineSeconds: 600
  # -- [min-ready-seconds](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#min-ready-seconds)
  minReadySeconds: 0
  # -- [revision-history-limit](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#revision-history-limit)
  revisionHistoryLimit: 3
  # -- [paused](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#paused)
  paused: false

# -- Set the image properties of the application-container
image:
  repository: nginx
  tag: latest
  pullPolicy: IfNotPresent

# -- Pull secret for K8S to get the image
imagePullSecrets:
  - name: myregistrykey
nameOverride: ""
fullnameOverride: ""

# -- Configure service
service:
  type: ClusterIP
  port: &server_port 8000

application:
  # -- The port where the application listens
  serverPort: *server_port
  # -- The mangement port the application, where the metrics, liveness and readiness is reachable
  managementPort: &management_port 9000
  # -- Configure the startup check for the application
  startupProbe:
    # -- Set false to disable startup probe
    enabled: true
    # -- Valid probe types are: [httpGet](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-http-request), [tcpSocket](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-tcp-liveness-probe), [exec](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-command)
    type: httpGet
    # -- Startup check endpoint (used only probe type httpGet)
    path: /health
    # -- Startup check port (used only probe type httpGet and tcpSocket)
    port: *management_port
    # -- Startup check host (used only probe type httpGet and tcpSocket)
    host: ~
    # -- Startup check http headers (used only probe type httpGet)
    httpHeaders: ~
    # -- Startup check Scheme to use for connecting to the host. Defaults to HTTP. (used only probe type httpGet)
    scheme: HTTP
    # -- Startup check http headers (used only probe type exec)
    command: ~
    # -- Startup check periodSeconds
    periodSeconds: 10
    # -- Startup check timeoutSeconds
    timeoutSeconds: 1
    # -- Startup check failureThreshold
    failureThreshold: 30
    # -- Startup check initialDelaySeconds
    initialDelaySeconds: 0
  # -- Configure the health check for the application
  liveness:
    # -- Set false to disable liveness probe
    enabled: true
    # -- Valid probe types are: [httpGet](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-http-request), [tcpSocket](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-tcp-liveness-probe), [exec](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-command)
    type: httpGet
    # -- Liveness check endpoint (used only probe type httpGet)
    path: /health
    # -- Liveness check port (used only probe type httpGet and tcpSocket)
    port: *management_port
    # -- Liveness check host (used only probe type httpGet and tcpSocket)
    host: ~
    # -- Liveness check http headers (used only probe type httpGet)
    httpHeaders: ~
    # -- Liveness check Scheme to use for connecting to the host. Defaults to HTTP. (used only probe type httpGet)
    scheme: HTTP
    # -- Liveness check http headers (used only probe type exec)
    command: ~
    # -- Liveness check periodSeconds
    periodSeconds: 20
    # -- Liveness check timeoutSeconds
    timeoutSeconds: 1
    # -- Liveness check failureThreshold
    failureThreshold: 3
    # -- Liveness check initialDelaySeconds
    initialDelaySeconds: 0
  # -- Configure the ready check for the application
  readiness:
    # -- Set false to disable readiness probe
    enabled: true
    # -- Valid probe types are: [httpGet](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-http-request), [tcpSocket](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-tcp-liveness-probe), [exec](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-command)
    type: httpGet
    # -- Readiness check endpoint (used only probe type httpGet)
    path: /health
    # -- Readiness check port (used only probe type httpGet and tcpSocket)
    port: *management_port
    # -- Readiness check host (used only probe type httpGet and tcpSocket)
    host: ~
    # -- Readiness check http headers (used only probe type httpGet)
    httpHeaders: ~
    # -- Readiness check Scheme to use for connecting to the host. Defaults to HTTP. (used only probe type httpGet)
    scheme: HTTP
    # -- Readiness check http headers (used only probe type exec)
    command: ~
    # -- Readiness check periodSeconds
    periodSeconds: 10
    # -- Readiness check timeoutSeconds
    timeoutSeconds: 1
    # -- Readiness check failureThreshold
    failureThreshold: 3
    # -- Readiness check initialDelaySeconds
    initialDelaySeconds: 0
    # -- Readiness check successThreshold
    successThreshold: 1
  # -- Configure time to wait until the pod is killed [more](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution)
  terminationGracePeriodSeconds: ~
  # -- Set command for the application container <br>
  # https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes
  command: ~
  # -- Set args for the application container <br>
  # https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes
  args: ~
  # -- Set postStart and preStop hook for the application container <br>
  # https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks <br>
  # https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/#define-poststart-and-prestop-handlers
  lifecycle: ~

appEnvSecret:
  # -- Name of the secret for sensitive env vars (It will be removed in future versions.)
  # See `env.secret` for more
  name: app-env-secret

# -- Configure configmap for env vars
# See `env.configMap` for more
appEnvConfigMap:
  name: app-env-config-map
  annotations: {}

# Environment variable listing
env:
  # -- Environment variable variables
  normal:
    SERVER_PORT: *server_port
    MANAGEMENT_PORT: *management_port
    LOG_LEVEL_APP: INFO
  # -- sensitive environment variables, if they should be. (It will be removed in future versions.)
  # See 'appEnvSecret' for configuring the Secret object
  secret: {}

  # -- environment variables stored in configmap
  # See 'appEnvConfigMap' for configuring the ConfigMap object
  configMap: {}

  # -- environment variables stored in vault
  # See https://banzaicloud.com/products/bank-vaults/
  vault: {}

# -- Configure metrics for Prometheus
metrics:
  enabled: true
  port: *management_port
  path: "/metrics"

# -- Use 192.168.x.x IP for the pod instead of reserved IPs for the application.
# It will be removed after moving to the NSXT clusters.
defaultIpPool: false

ingress:
  # -- Set ingerss object enabled
  enabled: false
  # -- List of ingress hosts
  hosts:
    - "{{ .Release.Namespace }}"
  # -- Name of the ingressClass. Override only if your ingress controller uses different ingress class than the default
  # by convention (NAMESPACE-ingress)
  ingressClass: "{{ .Release.Namespace }}-ingress"
  # -- List of ingress paths
  paths:
    - path: "/"
      backend:
        serviceName: "{{ .Release.Namespace }}-service-name"
        ## optional defaults to 8000
        servicePort: 8000

# -- Configure resources for the container and init-containers. Example:
# `{"limits":{"cpu":"100m","memory":"128Mi"},"requests":{"cpu":"100m","memory":"128Mi"}}`
resources: {}

# -- Configure node selectors
nodeSelector: {}

# -- Configure tolerations
tolerations: []

# -- Configure affinity
affinity: {}

# -- Configure annotations for the pod
podAnnotations: {}

# -- Configure annotations for the deployment and service
annotations: {}

cronJob:
  # -- [concurrency-policy](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#concurrency-policy)
  concurrencyPolicy: "Allow" # Forbid Replace
  # -- [starting-deadline](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#starting-deadline)
  startingDeadlineSeconds: ~ # null | Null | NULL | ~
  # -- [jobs-history-limits](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#jobs-history-limits)
  failedJobsHistoryLimit: 1
  # -- [jobs-history-limits](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#jobs-history-limits)
  successfulJobsHistoryLimit: 3
  # -- [schedule](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax)
  schedule: "@daily"
  # -- [suspend](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#suspend)
  suspend: false
  job:
    # -- [job-termination-and-cleanup](https://kubernetes.io/docs/concepts/workloads/controllers/job/#job-termination-and-cleanup)
    activeDeadlineSeconds: ~ # null | Null | NULL | ~
    # -- [pod-backoff-failure-policy](https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy)
    backoffLimit: 6
    # --  [parallel-jobs](https://kubernetes.io/docs/concepts/workloads/controllers/job/#parallel-jobs)
    completions: 1
    # --  [parallel-jobs](https://kubernetes.io/docs/concepts/workloads/controllers/job/#parallel-jobs)
    parallelism: 1
    # -- [ttl-mechanism-for-finished-jobs](https://kubernetes.io/docs/concepts/workloads/controllers/job/#ttl-mechanism-for-finished-jobs)
    ttlSecondsAfterFinished: ~ # null | Null | NULL | ~
    # --  Supported values: "OnFailure", "Never"
    podRestartPolicy: "OnFailure"

# -- Configure extra volumes for (init)containers <br>
# [Example](chart-test/tests/deployment/values-extra-init-containers.yaml)
extraVolumes: ~

# -- Configure extra volume mounts for the application container <br>
# [Example](chart-test/tests/deployment/values-extra-init-containers.yaml)
extraVolumeMounts: ~

# -- Configure extra volume mounts for the init containers <br>
# [Example](chart-test/tests/deployment/values-extra-init-containers.yaml)
extraInitContainers: ~